### Prerequisites

You need to have Node.js and npm installed on your machine. Also, you need a MySQL server running either locally or remotely.

## SERVER

1. Clone the repository
2. Open the project
3. run command `cd server`
4. Once inisde the server
5. Run `npm intsall`
6. Create a `.env` file and add the following variables:
   - `DB_HOST`: Your MySQL host
   - `DB_USER`: Your MySQL user
   - `DB_PASS`: Your MySQL password
   - `DB_NAME`: Your MySQL database name
7. Go to Create a new database name `apolloserver`
8. Run SQL commannd inside the database

  ```sql
  CREATE TABLE IF NOT EXISTS users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
  );

  CREATE TABLE IF NOT EXISTS tasks (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    user_id INT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
  );
  ```

9. run `npm start`

## CLIENT

1. go to client folder using command cd client
2. Install the dependencies using `npm install`
3. run `npm start`

## File Structure

- `index.js`: This is the server side file of the application. It sets up the MySQL connection and the GraphQL server.

## GraphQL Mutations

Here are some example GraphQL mutations you can use to interact with the server:

- Create a new user:

  ```graphql
  mutation {
    createUser(
      name: "John DOe",
      email: "john@mail.com",
      password: "1234"
    ) {
      name
      email
      password
    }
  }

    - Log in as a user
    ```graphql
    mutation {
        loginUser(email: "desc@mail.com", password: "1234") {
            token
            user {
            id
            name
            email
            }
        }
    }

## Code Overview

The `index.js` file starts by importing the necessary modules and setting up the MySQL connection using the environment variables from the `.env` file. It then connects to the MySQL database and logs a message to the console whether the connection was successful or not.

The file also defines a GraphQL schema with a `User` type. The `User` type has fields `id`, `name`, `email`, and `password`.

## Built With

- [Node.js](https://nodejs.org/)
- [Apollo Server](https://www.apollographql.com/docs/apollo-server/)
- [MySQL](https://www.mysql.com/)
- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)
- [bcrypt](https://www.npmjs.com/package/bcrypt)